// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Scanner.flex

/* ====== 1. CÃ³digo de usuario ====== */

import java.util.*;   // para ArrayList, HashMap, etc.
import java.io.*;     // para manejar archivos


@SuppressWarnings("fallthrough")
public class ScannerABS {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"+
    "\1\4\4\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\12\1\15\7\16\2\17\2\12\1\20"+
    "\1\21\1\22\2\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\43\1\12\1\54\2\12"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\43\1\55\1\0\1\56\262\0\2\57"+
    "\115\0\1\60\u02aa\0\1\61\u01d5\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\6\5\2\6\2\5"+
    "\25\7\1\10\2\1\1\0\1\11\1\4\1\0\1\12"+
    "\1\4\1\13\1\5\2\14\1\15\3\16\1\0\5\7"+
    "\1\0\5\7\1\17\1\0\5\7\1\0\1\7\1\17"+
    "\1\7\1\5\3\7\1\0\1\7\1\5\12\7\1\0"+
    "\2\7\1\0\2\7\1\0\1\20\1\17\1\1\1\5"+
    "\3\1\1\21\1\4\1\0\2\22\1\0\1\23\1\24"+
    "\1\25\2\7\1\0\1\5\1\7\2\17\2\7\1\0"+
    "\2\7\1\0\1\7\1\5\1\7\1\17\1\7\1\25"+
    "\11\7\1\0\6\7\1\0\1\7\1\25\1\7\1\25"+
    "\2\7\1\25\4\1\1\0\2\7\1\25\2\7\1\0"+
    "\1\17\1\7\1\0\1\7\1\25\6\7\1\0\4\7"+
    "\1\0\2\7\1\25\3\7\1\0\2\17\1\7\1\25"+
    "\1\7\2\1\1\0\2\1\2\0\1\23\2\7\1\25"+
    "\3\17\1\7\1\25\11\7\1\25\2\7\1\25\1\7"+
    "\1\25\1\7\1\25\2\1\1\0\2\1\1\0\4\7"+
    "\1\25\1\17\3\7\1\0\6\7\1\25\3\1\4\7"+
    "\1\25\1\7\1\17\1\7\1\25\4\7\3\1\1\7"+
    "\1\17\2\7\1\25\3\7\1\1\3\7\1\25\1\7"+
    "\1\17\1\1\2\7\1\17\1\7\1\1\1\7\1\17"+
    "\1\7\1\1\2\7\1\1\1\0\2\7\1\1\1\0"+
    "\1\7\1\17\161\7\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\62\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u079e\0\u0834\0\u0866\0\u079e\0\u01c2"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u09c4\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u09c4\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u079e\0\62\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u079e\0\u1356\0\u1388\0\u079e\0\u13ba"+
    "\0\u13ec\0\u141e\0\u0960\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1482"+
    "\0\u1518\0\u1482\0\u1450\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u1450\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770"+
    "\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1d1a\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u0992\0\u079e\0\u22c4\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u2486\0\u24b8"+
    "\0\u24ea\0\u251c\0\u24b8\0\u254e\0\u1edc\0\u2580\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904"+
    "\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94"+
    "\0\u2ac6\0\u2af8\0\u2b2a\0\u2a62\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2"+
    "\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82"+
    "\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12"+
    "\0\u2e18\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070"+
    "\0\u30a2\0\u30d4\0\u3106\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce"+
    "\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e"+
    "\0\u3296\0\u3390\0\u33c2\0\u33f4\0\u33c2\0\u3426\0\u3458\0\u348a"+
    "\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8"+
    "\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36b0\0\u36e2\0\u3714\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66"+
    "\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6"+
    "\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86"+
    "\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16"+
    "\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6"+
    "\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236"+
    "\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6"+
    "\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556"+
    "\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6"+
    "\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876"+
    "\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06"+
    "\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96"+
    "\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90\0\u4cc2\0\u4cc2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\7\1\12\1\13\1\14\2\15\1\16\1\7\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\27\1\31\1\32\1\33\1\34\1\35\1\27"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\27"+
    "\1\2\1\45\1\2\1\46\1\47\1\2\15\0\3\2"+
    "\3\0\31\2\7\0\3\3\56\0\2\4\2\50\1\51"+
    "\55\4\2\52\1\0\1\53\1\52\1\54\46\52\1\55"+
    "\5\52\10\0\1\56\4\0\3\2\3\0\31\2\16\0"+
    "\1\57\4\0\3\2\3\0\31\2\17\0\1\57\3\0"+
    "\3\2\3\0\31\2\21\0\1\57\1\0\3\2\3\0"+
    "\31\2\23\0\3\60\3\0\31\2\22\0\1\61\2\62"+
    "\1\63\3\0\27\64\1\65\1\64\22\0\1\61\3\15"+
    "\3\0\31\64\23\0\3\2\1\0\2\57\31\2\23\0"+
    "\3\2\1\0\1\57\1\0\31\2\6\0\1\66\3\0"+
    "\11\66\3\67\3\66\1\67\1\70\13\67\1\71\3\67"+
    "\1\72\1\73\6\67\4\66\1\74\2\66\3\0\11\66"+
    "\3\67\3\66\4\67\1\75\24\67\7\66\3\0\11\66"+
    "\3\67\3\66\1\76\15\67\1\77\12\67\7\66\3\0"+
    "\11\66\3\67\3\66\4\67\1\100\3\67\1\101\5\67"+
    "\1\102\12\67\3\66\1\103\3\66\3\0\11\66\3\67"+
    "\3\66\13\67\1\76\1\67\1\104\11\67\1\105\1\67"+
    "\7\66\3\0\11\66\3\67\3\66\10\67\1\106\5\67"+
    "\1\107\5\67\1\110\4\67\3\66\1\111\3\66\3\0"+
    "\11\66\3\67\3\66\16\67\1\112\12\67\7\66\3\0"+
    "\11\66\3\67\3\66\31\67\7\66\3\0\11\66\3\67"+
    "\3\66\5\67\1\113\6\67\1\114\1\115\13\67\7\66"+
    "\3\0\11\66\3\67\3\66\1\116\30\67\7\66\3\0"+
    "\11\66\3\67\3\66\16\67\1\71\12\67\7\66\3\0"+
    "\11\66\3\67\3\66\10\67\1\117\5\67\1\120\12\67"+
    "\3\66\1\121\3\66\3\0\11\66\3\67\3\66\1\67"+
    "\1\122\3\67\1\113\13\67\1\123\7\67\7\66\3\0"+
    "\11\66\3\67\3\66\1\124\20\67\1\125\7\67\7\66"+
    "\3\0\11\66\3\67\3\66\4\67\1\126\24\67\7\66"+
    "\3\0\11\66\3\67\3\66\4\67\1\127\2\67\1\130"+
    "\13\67\1\131\5\67\7\66\3\0\11\66\3\67\3\66"+
    "\7\67\1\132\6\67\1\113\11\67\1\133\7\66\3\0"+
    "\11\66\3\67\3\66\15\67\1\134\4\67\1\135\6\67"+
    "\4\66\1\136\2\66\3\0\11\66\3\67\3\66\1\137"+
    "\7\67\1\140\20\67\3\66\1\141\3\66\3\0\11\66"+
    "\3\67\3\66\7\67\1\142\1\143\20\67\3\66\1\144"+
    "\3\66\3\0\11\66\3\67\3\66\16\67\1\137\12\67"+
    "\6\66\56\45\1\145\3\45\15\0\3\2\3\0\5\2"+
    "\1\146\6\2\1\147\1\150\13\2\23\0\3\2\3\0"+
    "\4\2\1\151\2\2\1\152\13\2\1\153\5\2\6\0"+
    "\4\50\1\154\55\50\62\0\2\155\1\0\1\156\1\155"+
    "\1\157\54\155\2\156\1\0\2\156\1\157\54\156\2\155"+
    "\1\0\1\156\1\155\1\160\54\155\10\56\1\161\51\56"+
    "\15\0\3\162\56\0\1\61\2\62\1\63\3\0\31\64"+
    "\22\0\1\61\3\63\3\0\31\64\23\0\3\64\3\0"+
    "\31\64\23\0\3\163\3\0\6\163\23\64\6\0\1\66"+
    "\3\0\11\66\3\164\3\66\31\164\7\66\3\0\11\66"+
    "\3\165\3\66\31\165\7\66\3\0\11\66\3\165\3\66"+
    "\22\165\1\166\6\165\4\66\1\167\2\66\3\0\11\66"+
    "\3\165\3\66\3\165\1\170\25\165\7\66\3\0\11\66"+
    "\3\165\3\66\21\165\1\171\7\165\7\66\3\0\11\66"+
    "\3\165\3\66\14\165\1\172\14\165\7\66\3\0\11\66"+
    "\3\164\3\66\14\164\1\173\14\164\7\66\3\0\11\66"+
    "\3\165\3\66\6\165\1\174\22\165\7\66\3\0\11\66"+
    "\3\165\3\66\22\165\1\175\6\165\4\66\1\176\2\66"+
    "\3\0\11\66\3\165\3\66\15\165\1\177\13\165\7\66"+
    "\3\0\11\66\3\165\3\66\22\165\1\200\6\165\4\66"+
    "\1\201\2\66\3\0\11\66\3\165\3\66\25\165\1\170"+
    "\3\165\7\66\3\0\11\66\3\165\3\66\26\165\1\202"+
    "\2\165\7\66\3\0\11\66\3\164\3\66\25\164\1\203"+
    "\3\164\7\66\3\0\11\66\3\165\3\66\3\165\1\172"+
    "\25\165\7\66\3\0\11\66\3\165\3\66\23\165\1\204"+
    "\5\165\7\66\3\0\11\66\3\165\3\66\13\165\1\175"+
    "\15\165\7\66\3\0\11\66\3\165\3\66\21\165\1\205"+
    "\7\165\7\66\3\0\11\66\3\165\3\66\15\165\1\206"+
    "\13\165\7\66\3\0\11\66\3\164\3\66\13\164\1\207"+
    "\15\164\7\66\3\0\11\66\3\165\3\66\23\165\1\210"+
    "\5\165\7\66\3\0\11\66\3\165\3\66\17\165\1\211"+
    "\11\165\7\66\3\0\11\66\3\165\3\66\13\165\1\212"+
    "\7\165\1\213\5\165\7\66\3\0\11\66\3\165\3\66"+
    "\1\165\1\214\27\165\7\66\3\0\11\66\3\165\3\66"+
    "\13\165\1\172\15\165\7\66\3\0\11\66\3\165\3\66"+
    "\23\165\1\170\5\165\7\66\3\0\11\66\3\164\3\66"+
    "\13\164\1\173\15\164\7\66\3\0\11\66\3\165\3\66"+
    "\11\165\1\215\17\165\7\66\3\0\11\66\3\165\3\66"+
    "\2\165\1\216\26\165\7\66\3\0\11\66\3\165\3\66"+
    "\10\165\1\217\5\165\1\220\12\165\3\66\1\221\3\66"+
    "\3\0\11\66\3\165\3\66\2\165\1\222\14\165\1\223"+
    "\11\165\7\66\3\0\11\66\3\165\3\66\23\165\1\172"+
    "\5\165\7\66\3\0\11\66\3\165\3\66\13\165\1\172"+
    "\5\165\1\172\7\165\7\66\3\0\11\66\3\165\3\66"+
    "\21\165\1\224\7\165\7\66\3\0\11\66\3\165\3\66"+
    "\4\165\1\225\24\165\7\66\3\0\11\66\3\165\3\66"+
    "\17\165\1\175\11\165\7\66\3\0\11\66\3\165\3\66"+
    "\10\165\1\226\12\165\1\227\5\165\3\66\1\230\3\66"+
    "\3\0\11\66\3\165\3\66\4\165\1\231\24\165\7\66"+
    "\3\0\11\66\3\164\3\66\4\164\1\232\24\164\7\66"+
    "\3\0\11\66\3\165\3\66\21\165\1\172\7\165\7\66"+
    "\3\0\11\66\3\165\3\66\21\165\1\233\7\165\7\66"+
    "\3\0\11\66\3\164\3\66\21\164\1\234\7\164\7\66"+
    "\3\0\11\66\3\165\3\66\10\165\1\235\20\165\3\66"+
    "\1\111\3\66\3\0\11\66\3\165\3\66\23\165\1\236"+
    "\5\165\7\66\3\0\11\66\3\164\3\66\23\164\1\237"+
    "\5\164\6\66\15\0\3\2\3\0\17\2\1\240\11\2"+
    "\23\0\3\2\3\0\13\2\1\241\7\2\1\242\5\2"+
    "\23\0\3\2\3\0\23\2\1\146\5\2\23\0\3\2"+
    "\3\0\13\2\1\146\5\2\1\146\7\2\23\0\3\2"+
    "\3\0\21\2\1\243\7\2\6\0\2\155\1\0\1\156"+
    "\1\155\1\54\54\155\2\156\1\0\2\156\1\54\54\156"+
    "\5\0\1\157\54\0\7\56\1\145\52\56\15\0\3\162"+
    "\7\0\1\244\47\0\3\164\3\0\31\164\6\0\1\66"+
    "\3\0\11\66\3\245\3\66\31\245\7\66\3\0\11\66"+
    "\3\245\3\66\16\245\1\246\12\245\7\66\3\0\11\66"+
    "\3\164\3\66\16\164\1\247\12\164\7\66\3\0\11\66"+
    "\3\245\3\66\1\250\30\245\7\66\3\0\11\66\3\245"+
    "\3\66\10\245\1\251\20\245\3\66\1\252\3\66\3\0"+
    "\11\66\3\245\3\66\4\245\1\253\24\245\7\66\3\0"+
    "\11\66\3\164\3\66\4\164\1\173\24\164\7\66\3\0"+
    "\11\66\3\245\3\66\22\245\1\254\6\245\4\66\1\255"+
    "\2\66\3\0\11\66\3\245\3\66\23\245\1\256\5\245"+
    "\7\66\3\0\11\66\3\164\3\66\23\164\1\257\5\164"+
    "\7\66\3\0\11\66\3\245\3\66\15\245\1\260\13\245"+
    "\7\66\3\0\11\66\3\245\3\66\4\245\1\261\24\245"+
    "\7\66\3\0\11\66\3\245\3\66\26\245\1\262\2\245"+
    "\7\66\3\0\11\66\3\245\3\66\2\245\1\263\26\245"+
    "\6\66\15\0\3\164\3\0\4\164\1\173\24\164\6\0"+
    "\1\66\3\0\11\66\3\245\3\66\16\245\1\253\12\245"+
    "\7\66\3\0\11\66\3\245\3\66\13\245\1\264\15\245"+
    "\7\66\3\0\11\66\3\245\3\66\10\245\1\265\20\245"+
    "\3\66\1\266\3\66\3\0\11\66\3\245\3\66\4\245"+
    "\1\267\24\245\7\66\3\0\11\66\3\245\3\66\4\245"+
    "\1\270\24\245\7\66\3\0\11\66\3\245\3\66\4\245"+
    "\1\271\24\245\7\66\3\0\11\66\3\245\3\66\12\245"+
    "\1\272\16\245\5\66\1\273\1\66\3\0\11\66\3\245"+
    "\3\66\25\245\1\274\3\245\7\66\3\0\11\66\3\245"+
    "\3\66\2\245\1\275\26\245\7\66\3\0\11\66\3\164"+
    "\3\66\25\164\1\276\3\164\7\66\3\0\11\66\3\245"+
    "\3\66\16\245\1\277\12\245\7\66\3\0\11\66\3\245"+
    "\3\66\4\245\1\300\24\245\7\66\3\0\11\66\3\245"+
    "\3\66\10\245\1\301\20\245\3\66\1\302\3\66\3\0"+
    "\11\66\3\245\3\66\15\245\1\253\13\245\7\66\3\0"+
    "\11\66\3\245\3\66\23\245\1\253\5\245\7\66\3\0"+
    "\11\66\3\245\3\66\10\245\1\270\20\245\3\66\1\121"+
    "\3\66\3\0\11\66\3\164\3\66\23\164\1\173\5\164"+
    "\7\66\3\0\11\66\3\245\3\66\22\245\1\253\6\245"+
    "\4\66\1\303\1\66\15\0\3\164\3\0\22\164\1\173"+
    "\6\164\4\0\1\304\1\0\1\66\3\0\11\66\3\245"+
    "\3\66\23\245\1\305\5\245\6\66\15\0\3\164\3\0"+
    "\23\164\1\306\5\164\6\0\1\66\3\0\11\66\3\245"+
    "\3\66\13\245\1\307\15\245\7\66\3\0\11\66\3\245"+
    "\3\66\7\245\1\253\21\245\6\66\15\0\3\164\3\0"+
    "\7\164\1\173\21\164\23\0\3\2\3\0\13\2\1\310"+
    "\15\2\23\0\3\2\3\0\10\2\1\311\20\2\3\0"+
    "\1\312\17\0\3\2\3\0\4\2\1\313\24\2\23\0"+
    "\3\2\3\0\10\2\1\314\20\2\3\0\1\315\13\0"+
    "\1\316\1\0\1\316\1\0\3\317\42\0\1\66\3\0"+
    "\11\66\3\320\3\66\31\320\7\66\3\0\11\66\3\320"+
    "\3\66\13\320\1\321\15\320\6\66\15\0\3\164\3\0"+
    "\13\164\1\322\15\164\6\0\1\66\3\0\11\66\3\320"+
    "\3\66\30\320\1\323\7\66\3\0\11\66\3\320\3\66"+
    "\15\320\1\323\13\320\7\66\3\0\11\66\3\164\3\66"+
    "\15\164\1\173\13\164\7\66\3\0\11\66\3\320\3\66"+
    "\23\320\1\324\5\320\7\66\3\0\11\66\3\164\3\66"+
    "\23\164\1\325\5\164\7\66\3\0\11\66\3\320\3\66"+
    "\21\320\1\326\7\320\6\66\15\0\3\164\3\0\21\164"+
    "\1\327\7\164\6\0\1\66\3\0\11\66\3\320\3\66"+
    "\23\320\1\330\5\320\7\66\3\0\11\66\3\320\3\66"+
    "\21\320\1\331\7\320\7\66\3\0\11\66\3\320\3\66"+
    "\1\332\30\320\7\66\3\0\11\66\3\320\3\66\23\320"+
    "\1\333\5\320\7\66\3\0\11\66\3\320\3\66\4\320"+
    "\1\334\24\320\7\66\3\0\11\66\3\320\3\66\15\320"+
    "\1\335\13\320\7\66\3\0\11\66\3\164\3\66\15\164"+
    "\1\207\13\164\7\66\3\0\11\66\3\320\3\66\21\320"+
    "\1\336\7\320\7\66\3\0\11\66\3\320\3\66\13\320"+
    "\1\323\15\320\7\66\3\0\11\66\3\320\3\66\2\320"+
    "\1\337\26\320\7\66\3\0\11\66\3\320\3\66\4\320"+
    "\1\340\24\320\7\66\3\0\11\66\3\164\3\66\4\164"+
    "\1\341\24\164\7\66\3\0\11\66\3\320\3\66\1\342"+
    "\30\320\7\66\3\0\11\66\3\320\3\66\4\320\1\343"+
    "\24\320\6\66\15\0\3\164\3\0\1\344\30\164\6\0"+
    "\1\66\3\0\11\66\3\320\3\66\21\320\1\340\7\320"+
    "\7\66\3\0\11\66\3\320\3\66\1\337\30\320\7\66"+
    "\3\0\11\66\3\320\3\66\15\320\1\345\13\320\7\66"+
    "\3\0\11\66\3\164\3\66\15\164\1\346\13\164\7\66"+
    "\3\0\11\66\3\320\3\66\24\320\1\347\4\320\6\66"+
    "\15\0\3\164\3\0\24\164\1\350\4\164\6\0\1\66"+
    "\3\0\11\66\3\320\3\66\4\320\1\323\24\320\6\66"+
    "\15\0\3\2\3\0\4\2\1\351\24\2\23\0\3\2"+
    "\3\0\15\2\1\352\13\2\46\0\1\353\36\0\3\2"+
    "\3\0\21\2\1\354\7\2\23\0\3\2\3\0\15\2"+
    "\1\355\13\2\46\0\1\356\36\0\3\317\42\0\1\66"+
    "\3\0\11\66\3\357\3\66\31\357\7\66\3\0\11\66"+
    "\3\357\3\66\24\357\1\360\4\357\6\66\15\0\3\164"+
    "\3\0\24\164\1\344\4\164\6\0\1\66\3\0\11\66"+
    "\3\357\3\66\21\357\1\361\7\357\7\66\3\0\11\66"+
    "\3\357\3\66\24\357\1\362\4\357\6\66\15\0\3\164"+
    "\3\0\24\164\1\363\4\164\6\0\1\66\3\0\11\66"+
    "\3\357\3\66\16\357\1\364\12\357\7\66\3\0\11\66"+
    "\3\357\3\66\15\357\1\365\13\357\7\66\3\0\11\66"+
    "\3\357\3\66\21\357\1\366\7\357\7\66\3\0\11\66"+
    "\3\357\3\66\10\357\1\367\20\357\3\66\1\370\3\66"+
    "\3\0\11\66\3\357\3\66\14\357\1\371\14\357\7\66"+
    "\3\0\11\66\3\357\3\66\4\357\1\364\24\357\7\66"+
    "\3\0\11\66\3\357\3\66\5\357\1\372\13\357\1\373"+
    "\7\357\7\66\3\0\11\66\3\357\3\66\23\357\1\364"+
    "\5\357\7\66\3\0\11\66\3\357\3\66\3\357\1\364"+
    "\25\357\6\66\15\0\3\164\3\0\3\164\1\173\25\164"+
    "\6\0\1\66\3\0\11\66\3\357\3\66\23\357\1\374"+
    "\5\357\7\66\3\0\11\66\3\357\3\66\3\357\1\375"+
    "\25\357\6\66\15\0\3\164\3\0\23\164\1\207\5\164"+
    "\6\0\1\66\3\0\11\66\3\357\3\66\6\357\1\364"+
    "\22\357\6\66\15\0\3\164\3\0\6\164\1\173\22\164"+
    "\6\0\1\66\3\0\11\66\3\357\3\66\1\376\30\357"+
    "\6\66\15\0\3\164\3\0\1\377\30\164\23\0\3\2"+
    "\3\0\14\2\1\u0100\14\2\23\0\3\2\3\0\4\2"+
    "\1\146\24\2\35\0\1\304\47\0\3\2\3\0\5\2"+
    "\1\u0101\13\2\1\u0102\7\2\23\0\3\2\3\0\6\2"+
    "\1\146\22\2\37\0\1\304\30\0\1\66\3\0\11\66"+
    "\3\u0103\3\66\31\u0103\7\66\3\0\11\66\3\u0103\3\66"+
    "\23\u0103\1\u0104\5\u0103\7\66\3\0\11\66\3\u0103\3\66"+
    "\24\u0103\1\u0105\4\u0103\7\66\3\0\11\66\3\u0103\3\66"+
    "\2\u0103\1\u0106\26\u0103\6\66\15\0\3\164\3\0\2\164"+
    "\1\u0107\26\164\6\0\1\66\3\0\11\66\3\u0103\3\66"+
    "\1\u0108\30\u0103\7\66\3\0\11\66\3\u0103\3\66\3\u0103"+
    "\1\u0109\25\u0103\7\66\3\0\11\66\3\u0103\3\66\16\u0103"+
    "\1\u010a\12\u0103\7\66\3\0\11\66\3\164\3\66\16\164"+
    "\1\u010b\12\164\7\66\3\0\11\66\3\u0103\3\66\4\u0103"+
    "\1\u010c\24\u0103\7\66\3\0\11\66\3\u0103\3\66\1\u010d"+
    "\30\u0103\7\66\3\0\11\66\3\u0103\3\66\24\u0103\1\u010e"+
    "\4\u0103\7\66\3\0\11\66\3\u0103\3\66\4\u0103\1\u0109"+
    "\24\u0103\7\66\3\0\11\66\3\u0103\3\66\24\u0103\1\u010f"+
    "\4\u0103\7\66\3\0\11\66\3\u0103\3\66\13\u0103\1\u0109"+
    "\15\u0103\6\66\15\0\3\164\3\0\13\164\1\173\15\164"+
    "\23\0\3\2\3\0\4\2\1\u0110\24\2\23\0\3\2"+
    "\3\0\1\u0111\30\2\23\0\3\2\3\0\24\2\1\u0112"+
    "\4\2\6\0\1\66\3\0\11\66\3\u0113\3\66\31\u0113"+
    "\7\66\3\0\11\66\3\u0113\3\66\4\u0113\1\u0114\24\u0113"+
    "\7\66\3\0\11\66\3\u0113\3\66\2\u0113\1\u0115\26\u0113"+
    "\7\66\3\0\11\66\3\u0113\3\66\23\u0113\1\u0116\5\u0113"+
    "\6\66\15\0\3\164\3\0\23\164\1\u0117\5\164\6\0"+
    "\1\66\3\0\11\66\3\u0113\3\66\13\u0113\1\u0114\15\u0113"+
    "\7\66\3\0\11\66\3\u0113\3\66\15\u0113\1\u0114\13\u0113"+
    "\6\66\15\0\3\164\3\0\15\164\1\173\13\164\6\0"+
    "\1\66\3\0\11\66\3\u0113\3\66\15\u0113\1\u0118\13\u0113"+
    "\7\66\3\0\11\66\3\u0113\3\66\2\u0113\1\u0119\26\u0113"+
    "\7\66\3\0\11\66\3\u0113\3\66\17\u0113\1\u011a\11\u0113"+
    "\7\66\3\0\11\66\3\u0113\3\66\21\u0113\1\u0119\7\u0113"+
    "\6\66\15\0\3\2\3\0\15\2\1\u011b\13\2\23\0"+
    "\3\2\3\0\2\2\1\352\26\2\23\0\3\2\3\0"+
    "\17\2\1\151\11\2\6\0\1\66\3\0\11\66\3\u011c"+
    "\3\66\31\u011c\7\66\3\0\11\66\3\u011c\3\66\23\u011c"+
    "\1\u011d\5\u011c\7\66\3\0\11\66\3\u011c\3\66\16\u011c"+
    "\1\u011e\12\u011c\6\66\15\0\3\164\3\0\16\164\1\u011f"+
    "\12\164\6\0\1\66\3\0\11\66\3\u011c\3\66\23\u011c"+
    "\1\u0120\5\u011c\7\66\3\0\11\66\3\u011c\3\66\4\u011c"+
    "\1\u0121\24\u011c\7\66\3\0\11\66\3\u011c\3\66\23\u011c"+
    "\1\u0121\5\u011c\6\66\15\0\3\2\3\0\23\2\1\u0122"+
    "\5\2\6\0\1\66\3\0\11\66\3\u0123\3\66\31\u0123"+
    "\7\66\3\0\11\66\3\u0123\3\66\16\u0123\1\u0124\12\u0123"+
    "\7\66\3\0\11\66\3\u0123\3\66\21\u0123\1\u0125\7\u0123"+
    "\6\66\15\0\3\164\3\0\21\164\1\173\7\164\6\0"+
    "\1\66\3\0\11\66\3\u0123\3\66\1\u0126\30\u0123\6\66"+
    "\15\0\3\2\3\0\1\u0127\30\2\6\0\1\66\3\0"+
    "\11\66\3\u0128\3\66\31\u0128\7\66\3\0\11\66\3\u0128"+
    "\3\66\21\u0128\1\u0129\7\u0128\7\66\3\0\11\66\3\u0128"+
    "\3\66\23\u0128\1\u012a\5\u0128\6\66\15\0\3\2\3\0"+
    "\23\2\1\u012b\5\2\6\0\1\66\3\0\11\66\3\u012c"+
    "\3\66\31\u012c\7\66\3\0\11\66\3\u012c\3\66\10\u012c"+
    "\1\u012d\20\u012c\3\66\1\370\2\66\15\0\3\2\3\0"+
    "\10\2\1\u012e\20\2\3\0\1\u012f\2\0\1\66\3\0"+
    "\11\66\3\u0130\3\66\31\u0130\7\66\3\0\11\66\3\u0130"+
    "\3\66\16\u0130\1\u0131\12\u0130\6\66\15\0\3\2\3\0"+
    "\16\2\1\u0132\12\2\47\0\1\u0133\20\0\1\66\3\0"+
    "\11\66\3\u0134\3\66\31\u0134\7\66\3\0\11\66\3\u0134"+
    "\3\66\15\u0134\1\u0135\13\u0134\6\66\15\0\3\2\3\0"+
    "\15\2\1\146\13\2\46\0\1\304\21\0\1\66\3\0"+
    "\11\66\3\u0136\3\66\31\u0136\7\66\3\0\11\66\3\u0137"+
    "\3\66\31\u0137\7\66\3\0\11\66\3\u0138\3\66\31\u0138"+
    "\7\66\3\0\11\66\3\u0139\3\66\31\u0139\7\66\3\0"+
    "\11\66\3\u013a\3\66\31\u013a\7\66\3\0\11\66\3\u013b"+
    "\3\66\31\u013b\7\66\3\0\11\66\3\u013c\3\66\31\u013c"+
    "\7\66\3\0\11\66\3\u013d\3\66\31\u013d\7\66\3\0"+
    "\11\66\3\u013e\3\66\31\u013e\7\66\3\0\11\66\3\u013f"+
    "\3\66\31\u013f\7\66\3\0\11\66\3\u0140\3\66\31\u0140"+
    "\7\66\3\0\11\66\3\u0141\3\66\31\u0141\7\66\3\0"+
    "\11\66\3\u0142\3\66\31\u0142\7\66\3\0\11\66\3\u0143"+
    "\3\66\31\u0143\7\66\3\0\11\66\3\u0144\3\66\31\u0144"+
    "\7\66\3\0\11\66\3\u0145\3\66\31\u0145\7\66\3\0"+
    "\11\66\3\u0146\3\66\31\u0146\7\66\3\0\11\66\3\u0147"+
    "\3\66\31\u0147\7\66\3\0\11\66\3\u0148\3\66\31\u0148"+
    "\7\66\3\0\11\66\3\u0149\3\66\31\u0149\7\66\3\0"+
    "\11\66\3\u014a\3\66\31\u014a\7\66\3\0\11\66\3\u014b"+
    "\3\66\31\u014b\7\66\3\0\11\66\3\u014c\3\66\31\u014c"+
    "\7\66\3\0\11\66\3\u014d\3\66\31\u014d\7\66\3\0"+
    "\11\66\3\u014e\3\66\31\u014e\7\66\3\0\11\66\3\u014f"+
    "\3\66\31\u014f\7\66\3\0\11\66\3\u0150\3\66\31\u0150"+
    "\7\66\3\0\11\66\3\u0151\3\66\31\u0151\7\66\3\0"+
    "\11\66\3\u0152\3\66\31\u0152\7\66\3\0\11\66\3\u0153"+
    "\3\66\31\u0153\7\66\3\0\11\66\3\u0154\3\66\31\u0154"+
    "\7\66\3\0\11\66\3\u0155\3\66\31\u0155\7\66\3\0"+
    "\11\66\3\u0156\3\66\31\u0156\7\66\3\0\11\66\3\u0157"+
    "\3\66\31\u0157\7\66\3\0\11\66\3\u0158\3\66\31\u0158"+
    "\7\66\3\0\11\66\3\u0159\3\66\31\u0159\7\66\3\0"+
    "\11\66\3\u015a\3\66\31\u015a\7\66\3\0\11\66\3\u015b"+
    "\3\66\31\u015b\7\66\3\0\11\66\3\u015c\3\66\31\u015c"+
    "\7\66\3\0\11\66\3\u015d\3\66\31\u015d\7\66\3\0"+
    "\11\66\3\u015e\3\66\31\u015e\7\66\3\0\11\66\3\u015f"+
    "\3\66\31\u015f\7\66\3\0\11\66\3\u0160\3\66\31\u0160"+
    "\7\66\3\0\11\66\3\u0161\3\66\31\u0161\7\66\3\0"+
    "\11\66\3\u0162\3\66\31\u0162\7\66\3\0\11\66\3\u0163"+
    "\3\66\31\u0163\7\66\3\0\11\66\3\u0164\3\66\31\u0164"+
    "\7\66\3\0\11\66\3\u0165\3\66\31\u0165\7\66\3\0"+
    "\11\66\3\u0166\3\66\31\u0166\7\66\3\0\11\66\3\u0167"+
    "\3\66\31\u0167\7\66\3\0\11\66\3\u0168\3\66\31\u0168"+
    "\7\66\3\0\11\66\3\u0169\3\66\31\u0169\7\66\3\0"+
    "\11\66\3\u016a\3\66\31\u016a\7\66\3\0\11\66\3\u016b"+
    "\3\66\31\u016b\7\66\3\0\11\66\3\u016c\3\66\31\u016c"+
    "\7\66\3\0\11\66\3\u016d\3\66\31\u016d\7\66\3\0"+
    "\11\66\3\u016e\3\66\31\u016e\7\66\3\0\11\66\3\u016f"+
    "\3\66\31\u016f\7\66\3\0\11\66\3\u0170\3\66\31\u0170"+
    "\7\66\3\0\11\66\3\u0171\3\66\31\u0171\7\66\3\0"+
    "\11\66\3\u0172\3\66\31\u0172\7\66\3\0\11\66\3\u0173"+
    "\3\66\31\u0173\7\66\3\0\11\66\3\u0174\3\66\31\u0174"+
    "\7\66\3\0\11\66\3\u0175\3\66\31\u0175\7\66\3\0"+
    "\11\66\3\u0176\3\66\31\u0176\7\66\3\0\11\66\3\u0177"+
    "\3\66\31\u0177\7\66\3\0\11\66\3\u0178\3\66\31\u0178"+
    "\7\66\3\0\11\66\3\u0179\3\66\31\u0179\7\66\3\0"+
    "\11\66\3\u017a\3\66\31\u017a\7\66\3\0\11\66\3\u017b"+
    "\3\66\31\u017b\7\66\3\0\11\66\3\u017c\3\66\31\u017c"+
    "\7\66\3\0\11\66\3\u017d\3\66\31\u017d\7\66\3\0"+
    "\11\66\3\u017e\3\66\31\u017e\7\66\3\0\11\66\3\u017f"+
    "\3\66\31\u017f\7\66\3\0\11\66\3\u0180\3\66\31\u0180"+
    "\7\66\3\0\11\66\3\u0181\3\66\31\u0181\7\66\3\0"+
    "\11\66\3\u0182\3\66\31\u0182\7\66\3\0\11\66\3\u0183"+
    "\3\66\31\u0183\7\66\3\0\11\66\3\u0184\3\66\31\u0184"+
    "\7\66\3\0\11\66\3\u0185\3\66\31\u0185\7\66\3\0"+
    "\11\66\3\u0186\3\66\31\u0186\7\66\3\0\11\66\3\u0187"+
    "\3\66\31\u0187\7\66\3\0\11\66\3\u0188\3\66\31\u0188"+
    "\7\66\3\0\11\66\3\u0189\3\66\31\u0189\7\66\3\0"+
    "\11\66\3\u018a\3\66\31\u018a\7\66\3\0\11\66\3\u018b"+
    "\3\66\31\u018b\7\66\3\0\11\66\3\u018c\3\66\31\u018c"+
    "\7\66\3\0\11\66\3\u018d\3\66\31\u018d\7\66\3\0"+
    "\11\66\3\u018e\3\66\31\u018e\7\66\3\0\11\66\3\u018f"+
    "\3\66\31\u018f\7\66\3\0\11\66\3\u0190\3\66\31\u0190"+
    "\7\66\3\0\11\66\3\u0191\3\66\31\u0191\7\66\3\0"+
    "\11\66\3\u0192\3\66\31\u0192\7\66\3\0\11\66\3\u0193"+
    "\3\66\31\u0193\7\66\3\0\11\66\3\u0194\3\66\31\u0194"+
    "\7\66\3\0\11\66\3\u0195\3\66\31\u0195\7\66\3\0"+
    "\11\66\3\u0196\3\66\31\u0196\7\66\3\0\11\66\3\u0197"+
    "\3\66\31\u0197\7\66\3\0\11\66\3\u0198\3\66\31\u0198"+
    "\7\66\3\0\11\66\3\u0199\3\66\31\u0199\7\66\3\0"+
    "\11\66\3\u019a\3\66\31\u019a\7\66\3\0\11\66\3\u019b"+
    "\3\66\31\u019b\7\66\3\0\11\66\3\u019c\3\66\31\u019c"+
    "\7\66\3\0\11\66\3\u019d\3\66\31\u019d\7\66\3\0"+
    "\11\66\3\u019e\3\66\31\u019e\7\66\3\0\11\66\3\u019f"+
    "\3\66\31\u019f\7\66\3\0\11\66\3\u01a0\3\66\31\u01a0"+
    "\7\66\3\0\11\66\3\u01a1\3\66\31\u01a1\7\66\3\0"+
    "\11\66\3\u01a2\3\66\31\u01a2\7\66\3\0\11\66\3\u01a3"+
    "\3\66\31\u01a3\7\66\3\0\11\66\3\u01a4\3\66\31\u01a4"+
    "\7\66\3\0\11\66\3\u01a5\3\66\31\u01a5\7\66\3\0"+
    "\11\66\3\u01a6\3\66\31\u01a6\7\66\3\0\11\66\3\u01a7"+
    "\3\66\31\u01a7\6\66";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19700];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\46\1\1\0\1\11\1\1\1\0\1\11\2\1"+
    "\1\11\6\1\1\0\5\1\1\0\6\1\1\0\5\1"+
    "\1\0\7\1\1\0\14\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\11\6\1\1\11\1\1\1\0\1\11\1\1"+
    "\1\0\5\1\1\0\6\1\1\0\2\1\1\0\17\1"+
    "\1\0\6\1\1\0\13\1\1\0\5\1\1\0\2\1"+
    "\1\0\10\1\1\0\4\1\1\0\6\1\1\0\1\1"+
    "\1\11\5\1\1\0\2\1\2\0\34\1\1\0\2\1"+
    "\1\0\11\1\1\0\66\1\1\0\3\1\1\0\164\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
// Lista para guardar errores lÃ©xicos
private ArrayList<String> errores = new ArrayList<>();

public ArrayList<String> getErrores() {
    return errores;
}

// Mapa para tokens aceptados
private HashMap<String, TokenInfo> tokensAceptados = new HashMap<>();

// Clase auxiliar para almacenar info de token
private static class TokenInfo {
    String tipo;
    HashMap<Integer, Integer> lineas = new HashMap<>();

    TokenInfo(String tipo) {
        this.tipo = tipo;
    }

    void agregarLinea(int linea) {
        lineas.put(linea, lineas.getOrDefault(linea, 0) + 1);
    }
}

// MÃ©todo para registrar tokens vÃ¡lidos
private void registrarToken(String token, String tipo) {
    token = token.toUpperCase(); 
    TokenInfo info = tokensAceptados.get(token);
    if(info == null) {
        info = new TokenInfo(tipo);
        tokensAceptados.put(token, info);
    }
    info.agregarLinea(yyline + 1); 
}

// MÃ©todo para mostrar tabla al final
public void imprimirTokens() {
    System.out.printf("%-20s %-25s %s\n", "Token", "Tipo de Token", "LÃ­neas");
    System.out.println("----------------------------------------------------------");
    List<String> claves = new ArrayList<>(tokensAceptados.keySet());
    Collections.sort(claves); // orden alfabÃ©tico
    for(String token : claves) {
        TokenInfo info = tokensAceptados.get(token);
        StringBuilder sb = new StringBuilder();
        for(Map.Entry<Integer, Integer> e : info.lineas.entrySet()) {
            sb.append(e.getKey());
            if(e.getValue() > 1) sb.append("(").append(e.getValue()).append(")");
            sb.append(", ");
        }
        if(sb.length() >= 2) sb.setLength(sb.length() - 2); // quitar Ãºltima coma
        System.out.printf("%-20s %-25s %s\n", token, info.tipo, sb.toString());
    }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public String yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": identificador invÃ¡lido, no puede iniciar con sÃ­mbolo. Texto: " + yytext());
            }
          // fall through
          case 23: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 24: break;
          case 3:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": string sin cerrar. Texto: " + yytext());
            }
          // fall through
          case 25: break;
          case 4:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": carÃ¡cter sin cerrar. Texto: " + yytext());
            }
          // fall through
          case 26: break;
          case 5:
            { registrarToken(yytext(), "OPERADOR");
            }
          // fall through
          case 27: break;
          case 6:
            { registrarToken(yytext(), "LITERAL ENTERO");
            }
          // fall through
          case 28: break;
          case 7:
            { registrarToken(yytext(), "IDENTIFICADOR");
            }
          // fall through
          case 29: break;
          case 8:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", comentario '{' sin cerrar. Texto: " + yytext());
            }
          // fall through
          case 30: break;
          case 9:
            { registrarToken(yytext(), "LITERAL STRING");
            }
          // fall through
          case 31: break;
          case 10:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": carÃ¡cter invÃ¡lido. Texto: " + yytext());
            }
          // fall through
          case 32: break;
          case 11:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", comentario '(*' sin cerrar. Texto: " + yytext());
            }
          // fall through
          case 33: break;
          case 12:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": nÃºmero real incorrecto. Texto: " + yytext());
            }
          // fall through
          case 34: break;
          case 13:
            { registrarToken(yytext(), "LITERAL OCTAL");
            }
          // fall through
          case 35: break;
          case 14:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": identificador invÃ¡lido, no puede iniciar con un nÃºmero. Texto: " + yytext());
            }
          // fall through
          case 36: break;
          case 15:
            { registrarToken(yytext(), "PALABRA RESERVADA");
            }
          // fall through
          case 37: break;
          case 16:
            { registrarToken(yytext(), "COMENTARIO");
            }
          // fall through
          case 38: break;
          case 17:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": string incorrecto. Texto: " + yytext());
            }
          // fall through
          case 39: break;
          case 18:
            { registrarToken(yytext(), "LITERAL CARACTER");
            }
          // fall through
          case 40: break;
          case 19:
            { registrarToken(yytext(), "LITERAL REAL");
            }
          // fall through
          case 41: break;
          case 20:
            { registrarToken(yytext(), "LITERAL HEXADECIMAL");
            }
          // fall through
          case 42: break;
          case 21:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": identificador invÃ¡lido, solo se permiten letras y dÃ­gitos. Texto: " + yytext());
            }
          // fall through
          case 43: break;
          case 22:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": identificador invÃ¡lido, excede el mÃ¡ximo de 127 caracteres. Texto: " + yytext());
            }
          // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
