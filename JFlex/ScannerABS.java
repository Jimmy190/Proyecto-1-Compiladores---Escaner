// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Scanner.flex

/* ====== 1. CÃ³digo de usuario ====== */

import java.util.*;   // para ArrayList, HashMap, etc.
import java.io.*;     // para manejar archivos


@SuppressWarnings("fallthrough")
public class ScannerABS {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\13\1\16\7\17\2\20\2\13\1\21"+
    "\1\22\1\23\2\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\44\1\13\1\55\2\13"+
    "\2\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\44\1\56\1\0\1\57\7\0\1\3"+
    "\252\0\2\60\115\0\1\61\u01a8\0\2\3\u0100\0\1\62"+
    "\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\6\5\2\6\2\5"+
    "\25\7\3\1\1\0\1\10\1\4\1\0\1\11\1\4"+
    "\1\0\2\12\1\13\3\14\1\0\5\7\1\0\5\7"+
    "\1\15\1\0\5\7\1\0\1\7\1\15\1\7\1\5"+
    "\3\7\1\0\1\7\1\5\12\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\16\1\15\1\0\1\5\3\0\1\17"+
    "\1\4\1\0\2\20\1\0\1\21\1\22\1\23\2\7"+
    "\1\0\1\5\1\7\2\15\2\7\1\0\2\7\1\0"+
    "\1\7\1\5\1\7\1\15\1\7\1\23\11\7\1\0"+
    "\6\7\1\0\1\7\1\23\1\7\1\23\2\7\1\23"+
    "\4\0\1\24\1\0\2\7\1\23\2\7\1\0\1\15"+
    "\1\7\1\0\1\7\1\23\6\7\1\0\4\7\1\0"+
    "\2\7\1\23\3\7\1\0\1\15\1\7\1\23\1\7"+
    "\5\0\1\21\2\7\1\23\3\15\1\7\1\23\11\7"+
    "\1\23\2\7\1\23\1\7\1\23\1\7\1\23\4\0"+
    "\4\7\1\23\1\15\3\7\1\0\6\7\1\23\3\0"+
    "\4\7\1\23\1\7\1\15\1\7\1\23\4\7\3\0"+
    "\1\7\1\15\2\7\1\23\3\7\1\0\3\7\1\23"+
    "\1\7\1\15\1\0\2\7\1\15\1\7\1\0\1\7"+
    "\1\15\1\7\1\0\2\7\1\0\2\7\1\0\1\7"+
    "\1\15\161\7\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\63\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\63\0\u07c5\0\u07f8\0\63\0\u082b\0\u085e\0\u01cb\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u09c3\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u09c3\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb"+
    "\0\u11ee\0\u1221\0\u1254\0\u06f9\0\63\0\63\0\u1287\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\63\0\u1386\0\u13b9\0\63\0\u13ec"+
    "\0\u141f\0\u1452\0\u095d\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u14b8"+
    "\0\u1551\0\u14b8\0\u1485\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u1485\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\63\0\u1d49\0\u1d7c\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1d7c\0\u1eae\0\u1ee1\0\u1f14\0\u1f47"+
    "\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277"+
    "\0\u22aa\0\u22dd\0\u2310\0\u0990\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u24db\0\u2574\0\u1f47\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673"+
    "\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b"+
    "\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2a3c"+
    "\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0"+
    "\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38"+
    "\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2e05\0\u2f37\0\u2f6a\0\u2f9d"+
    "\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf\0\u3102\0\u3102"+
    "\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a"+
    "\0\u32cd\0\u3300\0\u3333\0\u3366\0\u329a\0\u3399\0\u33cc\0\u33ff"+
    "\0\u33cc\0\u3432\0\u3465\0\u3498\0\u3498\0\u34cb\0\u34fe\0\u3531"+
    "\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3663\0\u3696"+
    "\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993\0\u39c6"+
    "\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e"+
    "\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6"+
    "\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u3e5b\0\u3e8e"+
    "\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026"+
    "\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be"+
    "\0\u41f1\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356"+
    "\0\u4389\0\u43bc\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee"+
    "\0\u4521\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686"+
    "\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb\0\u481e"+
    "\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u4983\0\u49b6"+
    "\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8\0\u4b1b\0\u4b4e"+
    "\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6"+
    "\0\u4ce6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\7\1\12\1\13\1\14\2\15\1\16"+
    "\1\7\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\27\1\31\1\32\1\33\1\34"+
    "\1\35\1\27\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\27\1\2\1\45\1\2\1\46\1\47\1\2"+
    "\64\0\2\3\1\0\1\3\56\0\2\4\1\50\1\4"+
    "\1\50\1\51\55\4\2\52\1\0\1\52\1\53\1\52"+
    "\1\54\46\52\1\55\5\52\11\0\1\56\62\0\1\7"+
    "\63\0\1\7\64\0\1\7\64\0\3\57\57\0\1\60"+
    "\2\61\1\62\3\0\27\63\1\64\1\63\23\0\1\60"+
    "\3\15\3\0\31\63\30\0\2\7\61\0\1\7\40\0"+
    "\1\65\2\0\1\65\1\0\11\65\3\66\3\65\1\66"+
    "\1\67\13\66\1\70\3\66\1\71\1\72\6\66\4\65"+
    "\1\73\2\65\2\0\1\65\1\0\11\65\3\66\3\65"+
    "\4\66\1\74\24\66\7\65\2\0\1\65\1\0\11\65"+
    "\3\66\3\65\1\75\15\66\1\76\12\66\7\65\2\0"+
    "\1\65\1\0\11\65\3\66\3\65\4\66\1\77\3\66"+
    "\1\100\5\66\1\101\12\66\3\65\1\102\3\65\2\0"+
    "\1\65\1\0\11\65\3\66\3\65\13\66\1\75\1\66"+
    "\1\103\11\66\1\104\1\66\7\65\2\0\1\65\1\0"+
    "\11\65\3\66\3\65\10\66\1\105\5\66\1\106\5\66"+
    "\1\107\4\66\3\65\1\110\3\65\2\0\1\65\1\0"+
    "\11\65\3\66\3\65\16\66\1\111\12\66\7\65\2\0"+
    "\1\65\1\0\11\65\3\66\3\65\31\66\7\65\2\0"+
    "\1\65\1\0\11\65\3\66\3\65\5\66\1\112\6\66"+
    "\1\113\1\114\13\66\7\65\2\0\1\65\1\0\11\65"+
    "\3\66\3\65\1\115\30\66\7\65\2\0\1\65\1\0"+
    "\11\65\3\66\3\65\16\66\1\70\12\66\7\65\2\0"+
    "\1\65\1\0\11\65\3\66\3\65\10\66\1\116\5\66"+
    "\1\117\12\66\3\65\1\120\3\65\2\0\1\65\1\0"+
    "\11\65\3\66\3\65\1\66\1\121\3\66\1\112\13\66"+
    "\1\122\7\66\7\65\2\0\1\65\1\0\11\65\3\66"+
    "\3\65\1\123\20\66\1\124\7\66\7\65\2\0\1\65"+
    "\1\0\11\65\3\66\3\65\4\66\1\125\24\66\7\65"+
    "\2\0\1\65\1\0\11\65\3\66\3\65\4\66\1\126"+
    "\2\66\1\127\13\66\1\130\5\66\7\65\2\0\1\65"+
    "\1\0\11\65\3\66\3\65\7\66\1\131\6\66\1\112"+
    "\11\66\1\132\7\65\2\0\1\65\1\0\11\65\3\66"+
    "\3\65\15\66\1\133\4\66\1\134\6\66\4\65\1\135"+
    "\2\65\2\0\1\65\1\0\11\65\3\66\3\65\1\136"+
    "\7\66\1\137\20\66\3\65\1\140\3\65\2\0\1\65"+
    "\1\0\11\65\3\66\3\65\7\66\1\141\1\142\20\66"+
    "\3\65\1\143\3\65\2\0\1\65\1\0\11\65\3\66"+
    "\3\65\16\66\1\136\12\66\6\65\57\144\1\145\3\144"+
    "\31\0\1\146\6\0\1\147\1\150\51\0\1\151\2\0"+
    "\1\152\13\0\1\153\13\0\5\50\1\154\55\50\2\155"+
    "\1\0\1\155\1\156\1\155\1\157\54\155\2\156\1\0"+
    "\3\156\1\157\54\156\2\155\1\0\1\155\1\156\1\155"+
    "\1\160\54\155\11\56\1\161\51\56\16\0\3\162\57\0"+
    "\1\60\2\61\1\62\3\0\31\63\23\0\1\60\3\62"+
    "\3\0\31\63\24\0\3\63\3\0\31\63\24\0\3\163"+
    "\3\0\6\163\23\63\6\0\1\65\2\0\1\65\1\0"+
    "\11\65\3\164\3\65\31\164\7\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\31\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\22\165\1\166\6\165\4\65\1\167"+
    "\2\65\2\0\1\65\1\0\11\65\3\165\3\65\3\165"+
    "\1\170\25\165\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\21\165\1\171\7\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\14\165\1\172\14\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\164\3\65\14\164\1\173\14\164"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\6\165"+
    "\1\174\22\165\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\22\165\1\175\6\165\4\65\1\176\2\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\15\165\1\177\13\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\22\165"+
    "\1\200\6\165\4\65\1\201\2\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\25\165\1\170\3\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\26\165\1\202\2\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\164\3\65\25\164"+
    "\1\203\3\164\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\3\165\1\172\25\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\23\165\1\204\5\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\13\165\1\175\15\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\21\165"+
    "\1\205\7\165\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\15\165\1\206\13\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\164\3\65\13\164\1\207\15\164\7\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\23\165\1\210\5\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\17\165"+
    "\1\211\11\165\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\13\165\1\212\7\165\1\213\5\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\1\165\1\214\27\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\13\165"+
    "\1\172\15\165\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\23\165\1\170\5\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\164\3\65\13\164\1\173\15\164\7\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\11\165\1\215\17\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\2\165"+
    "\1\216\26\165\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\10\165\1\217\5\165\1\220\12\165\3\65\1\221"+
    "\3\65\2\0\1\65\1\0\11\65\3\165\3\65\2\165"+
    "\1\222\14\165\1\223\11\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\23\165\1\172\5\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\13\165\1\172\5\165"+
    "\1\172\7\165\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\21\165\1\224\7\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\4\165\1\225\24\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\17\165\1\175\11\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\10\165"+
    "\1\226\12\165\1\227\5\165\3\65\1\230\3\65\2\0"+
    "\1\65\1\0\11\65\3\165\3\65\4\165\1\231\24\165"+
    "\7\65\2\0\1\65\1\0\11\65\3\164\3\65\4\164"+
    "\1\232\24\164\7\65\2\0\1\65\1\0\11\65\3\165"+
    "\3\65\21\165\1\172\7\165\7\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\21\165\1\233\7\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\164\3\65\21\164\1\234\7\164"+
    "\7\65\2\0\1\65\1\0\11\65\3\165\3\65\10\165"+
    "\1\235\20\165\3\65\1\110\3\65\2\0\1\65\1\0"+
    "\11\65\3\165\3\65\23\165\1\236\5\165\7\65\2\0"+
    "\1\65\1\0\11\65\3\164\3\65\23\164\1\237\5\164"+
    "\6\65\43\0\1\240\56\0\1\241\7\0\1\242\62\0"+
    "\1\146\52\0\1\146\5\0\1\146\62\0\1\243\15\0"+
    "\2\155\1\0\1\155\1\156\1\155\1\54\54\155\2\156"+
    "\1\0\3\156\1\54\54\156\6\0\1\157\54\0\10\56"+
    "\1\244\52\56\16\0\3\162\7\0\1\245\50\0\3\164"+
    "\3\0\31\164\6\0\1\65\2\0\1\65\1\0\11\65"+
    "\3\246\3\65\31\246\7\65\2\0\1\65\1\0\11\65"+
    "\3\246\3\65\16\246\1\247\12\246\7\65\2\0\1\65"+
    "\1\0\11\65\3\164\3\65\16\164\1\250\12\164\7\65"+
    "\2\0\1\65\1\0\11\65\3\246\3\65\1\251\30\246"+
    "\7\65\2\0\1\65\1\0\11\65\3\246\3\65\10\246"+
    "\1\252\20\246\3\65\1\253\3\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\4\246\1\254\24\246\7\65\2\0"+
    "\1\65\1\0\11\65\3\164\3\65\4\164\1\173\24\164"+
    "\7\65\2\0\1\65\1\0\11\65\3\246\3\65\22\246"+
    "\1\255\6\246\4\65\1\256\2\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\23\246\1\257\5\246\7\65\2\0"+
    "\1\65\1\0\11\65\3\164\3\65\23\164\1\260\5\164"+
    "\7\65\2\0\1\65\1\0\11\65\3\246\3\65\15\246"+
    "\1\261\13\246\7\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\4\246\1\262\24\246\7\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\26\246\1\263\2\246\7\65\2\0"+
    "\1\65\1\0\11\65\3\246\3\65\2\246\1\264\26\246"+
    "\6\65\16\0\3\164\3\0\4\164\1\173\24\164\6\0"+
    "\1\65\2\0\1\65\1\0\11\65\3\246\3\65\16\246"+
    "\1\254\12\246\7\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\13\246\1\265\15\246\7\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\10\246\1\266\20\246\3\65\1\267"+
    "\3\65\2\0\1\65\1\0\11\65\3\246\3\65\4\246"+
    "\1\270\24\246\7\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\4\246\1\271\24\246\7\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\4\246\1\272\24\246\7\65\2\0"+
    "\1\65\1\0\11\65\3\246\3\65\12\246\1\273\16\246"+
    "\5\65\1\274\1\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\25\246\1\275\3\246\7\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\2\246\1\276\26\246\7\65\2\0"+
    "\1\65\1\0\11\65\3\164\3\65\25\164\1\277\3\164"+
    "\7\65\2\0\1\65\1\0\11\65\3\246\3\65\16\246"+
    "\1\300\12\246\7\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\4\246\1\301\24\246\7\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\10\246\1\302\20\246\3\65\1\303"+
    "\3\65\2\0\1\65\1\0\11\65\3\246\3\65\15\246"+
    "\1\254\13\246\7\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\23\246\1\254\5\246\7\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\10\246\1\271\20\246\3\65\1\120"+
    "\3\65\2\0\1\65\1\0\11\65\3\164\3\65\23\164"+
    "\1\173\5\164\7\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\22\246\1\254\6\246\4\65\1\304\1\65\16\0"+
    "\3\164\3\0\22\164\1\173\6\164\4\0\1\146\1\0"+
    "\1\65\2\0\1\65\1\0\11\65\3\246\3\65\23\246"+
    "\1\305\5\246\6\65\16\0\3\164\3\0\23\164\1\306"+
    "\5\164\6\0\1\65\2\0\1\65\1\0\11\65\3\246"+
    "\3\65\13\246\1\307\15\246\7\65\2\0\1\65\1\0"+
    "\11\65\3\246\3\65\7\246\1\254\21\246\6\65\16\0"+
    "\3\164\3\0\7\164\1\173\21\164\45\0\1\310\57\0"+
    "\1\311\23\0\1\311\32\0\1\312\66\0\1\313\23\0"+
    "\1\313\14\0\1\314\1\0\1\314\1\0\3\315\42\0"+
    "\1\65\2\0\1\65\1\0\11\65\3\316\3\65\31\316"+
    "\7\65\2\0\1\65\1\0\11\65\3\316\3\65\13\316"+
    "\1\317\15\316\6\65\16\0\3\164\3\0\13\164\1\320"+
    "\15\164\6\0\1\65\2\0\1\65\1\0\11\65\3\316"+
    "\3\65\30\316\1\321\7\65\2\0\1\65\1\0\11\65"+
    "\3\316\3\65\15\316\1\321\13\316\7\65\2\0\1\65"+
    "\1\0\11\65\3\164\3\65\15\164\1\173\13\164\7\65"+
    "\2\0\1\65\1\0\11\65\3\316\3\65\23\316\1\322"+
    "\5\316\7\65\2\0\1\65\1\0\11\65\3\164\3\65"+
    "\23\164\1\323\5\164\7\65\2\0\1\65\1\0\11\65"+
    "\3\316\3\65\21\316\1\324\7\316\6\65\16\0\3\164"+
    "\3\0\21\164\1\325\7\164\6\0\1\65\2\0\1\65"+
    "\1\0\11\65\3\316\3\65\23\316\1\326\5\316\7\65"+
    "\2\0\1\65\1\0\11\65\3\316\3\65\21\316\1\327"+
    "\7\316\7\65\2\0\1\65\1\0\11\65\3\316\3\65"+
    "\1\330\30\316\7\65\2\0\1\65\1\0\11\65\3\316"+
    "\3\65\23\316\1\331\5\316\7\65\2\0\1\65\1\0"+
    "\11\65\3\316\3\65\4\316\1\332\24\316\7\65\2\0"+
    "\1\65\1\0\11\65\3\316\3\65\15\316\1\333\13\316"+
    "\7\65\2\0\1\65\1\0\11\65\3\164\3\65\15\164"+
    "\1\207\13\164\7\65\2\0\1\65\1\0\11\65\3\316"+
    "\3\65\21\316\1\334\7\316\7\65\2\0\1\65\1\0"+
    "\11\65\3\316\3\65\13\316\1\321\15\316\7\65\2\0"+
    "\1\65\1\0\11\65\3\316\3\65\2\316\1\335\26\316"+
    "\7\65\2\0\1\65\1\0\11\65\3\316\3\65\4\316"+
    "\1\336\24\316\7\65\2\0\1\65\1\0\11\65\3\164"+
    "\3\65\4\164\1\337\24\164\7\65\2\0\1\65\1\0"+
    "\11\65\3\316\3\65\1\340\30\316\7\65\2\0\1\65"+
    "\1\0\11\65\3\316\3\65\4\316\1\341\24\316\6\65"+
    "\16\0\3\164\3\0\1\342\30\164\6\0\1\65\2\0"+
    "\1\65\1\0\11\65\3\316\3\65\21\316\1\336\7\316"+
    "\7\65\2\0\1\65\1\0\11\65\3\316\3\65\1\335"+
    "\30\316\7\65\2\0\1\65\1\0\11\65\3\316\3\65"+
    "\15\316\1\343\13\316\7\65\2\0\1\65\1\0\11\65"+
    "\3\164\3\65\15\164\1\344\13\164\7\65\2\0\1\65"+
    "\1\0\11\65\3\316\3\65\24\316\1\345\4\316\6\65"+
    "\16\0\3\164\3\0\24\164\1\346\4\164\6\0\1\65"+
    "\2\0\1\65\1\0\11\65\3\316\3\65\4\316\1\321"+
    "\24\316\6\65\30\0\1\347\73\0\1\350\66\0\1\351"+
    "\56\0\1\352\37\0\3\315\42\0\1\65\2\0\1\65"+
    "\1\0\11\65\3\353\3\65\31\353\7\65\2\0\1\65"+
    "\1\0\11\65\3\353\3\65\24\353\1\354\4\353\6\65"+
    "\16\0\3\164\3\0\24\164\1\342\4\164\6\0\1\65"+
    "\2\0\1\65\1\0\11\65\3\353\3\65\21\353\1\355"+
    "\7\353\7\65\2\0\1\65\1\0\11\65\3\353\3\65"+
    "\24\353\1\356\4\353\6\65\16\0\3\164\3\0\24\164"+
    "\1\357\4\164\6\0\1\65\2\0\1\65\1\0\11\65"+
    "\3\353\3\65\16\353\1\360\12\353\7\65\2\0\1\65"+
    "\1\0\11\65\3\353\3\65\15\353\1\361\13\353\7\65"+
    "\2\0\1\65\1\0\11\65\3\353\3\65\21\353\1\362"+
    "\7\353\7\65\2\0\1\65\1\0\11\65\3\353\3\65"+
    "\10\353\1\363\20\353\3\65\1\364\3\65\2\0\1\65"+
    "\1\0\11\65\3\353\3\65\14\353\1\365\14\353\7\65"+
    "\2\0\1\65\1\0\11\65\3\353\3\65\4\353\1\360"+
    "\24\353\7\65\2\0\1\65\1\0\11\65\3\353\3\65"+
    "\5\353\1\366\13\353\1\367\7\353\7\65\2\0\1\65"+
    "\1\0\11\65\3\353\3\65\23\353\1\360\5\353\7\65"+
    "\2\0\1\65\1\0\11\65\3\353\3\65\3\353\1\360"+
    "\25\353\6\65\16\0\3\164\3\0\3\164\1\173\25\164"+
    "\6\0\1\65\2\0\1\65\1\0\11\65\3\353\3\65"+
    "\23\353\1\370\5\353\7\65\2\0\1\65\1\0\11\65"+
    "\3\353\3\65\3\353\1\371\25\353\6\65\16\0\3\164"+
    "\3\0\23\164\1\207\5\164\6\0\1\65\2\0\1\65"+
    "\1\0\11\65\3\353\3\65\6\353\1\360\22\353\6\65"+
    "\16\0\3\164\3\0\6\164\1\173\22\164\6\0\1\65"+
    "\2\0\1\65\1\0\11\65\3\353\3\65\1\372\30\353"+
    "\6\65\16\0\3\164\3\0\1\373\30\164\46\0\1\374"+
    "\52\0\1\146\63\0\1\375\13\0\1\376\47\0\1\146"+
    "\30\0\1\65\2\0\1\65\1\0\11\65\3\377\3\65"+
    "\31\377\7\65\2\0\1\65\1\0\11\65\3\377\3\65"+
    "\23\377\1\u0100\5\377\7\65\2\0\1\65\1\0\11\65"+
    "\3\377\3\65\24\377\1\u0101\4\377\7\65\2\0\1\65"+
    "\1\0\11\65\3\377\3\65\2\377\1\u0102\26\377\6\65"+
    "\16\0\3\164\3\0\2\164\1\u0103\26\164\6\0\1\65"+
    "\2\0\1\65\1\0\11\65\3\377\3\65\1\u0104\30\377"+
    "\7\65\2\0\1\65\1\0\11\65\3\377\3\65\3\377"+
    "\1\u0105\25\377\7\65\2\0\1\65\1\0\11\65\3\377"+
    "\3\65\16\377\1\u0106\12\377\7\65\2\0\1\65\1\0"+
    "\11\65\3\164\3\65\16\164\1\u0107\12\164\7\65\2\0"+
    "\1\65\1\0\11\65\3\377\3\65\4\377\1\u0108\24\377"+
    "\7\65\2\0\1\65\1\0\11\65\3\377\3\65\1\u0109"+
    "\30\377\7\65\2\0\1\65\1\0\11\65\3\377\3\65"+
    "\24\377\1\u010a\4\377\7\65\2\0\1\65\1\0\11\65"+
    "\3\377\3\65\4\377\1\u0105\24\377\7\65\2\0\1\65"+
    "\1\0\11\65\3\377\3\65\24\377\1\u010b\4\377\7\65"+
    "\2\0\1\65\1\0\11\65\3\377\3\65\13\377\1\u0105"+
    "\15\377\6\65\16\0\3\164\3\0\13\164\1\173\15\164"+
    "\36\0\1\u010c\56\0\1\u010d\106\0\1\u010e\12\0\1\65"+
    "\2\0\1\65\1\0\11\65\3\u010f\3\65\31\u010f\7\65"+
    "\2\0\1\65\1\0\11\65\3\u010f\3\65\4\u010f\1\u0110"+
    "\24\u010f\7\65\2\0\1\65\1\0\11\65\3\u010f\3\65"+
    "\2\u010f\1\u0111\26\u010f\7\65\2\0\1\65\1\0\11\65"+
    "\3\u010f\3\65\23\u010f\1\u0112\5\u010f\6\65\16\0\3\164"+
    "\3\0\23\164\1\u0113\5\164\6\0\1\65\2\0\1\65"+
    "\1\0\11\65\3\u010f\3\65\13\u010f\1\u0110\15\u010f\7\65"+
    "\2\0\1\65\1\0\11\65\3\u010f\3\65\15\u010f\1\u0110"+
    "\13\u010f\6\65\16\0\3\164\3\0\15\164\1\173\13\164"+
    "\6\0\1\65\2\0\1\65\1\0\11\65\3\u010f\3\65"+
    "\15\u010f\1\u0114\13\u010f\7\65\2\0\1\65\1\0\11\65"+
    "\3\u010f\3\65\2\u010f\1\u0115\26\u010f\7\65\2\0\1\65"+
    "\1\0\11\65\3\u010f\3\65\17\u010f\1\u0116\11\u010f\7\65"+
    "\2\0\1\65\1\0\11\65\3\u010f\3\65\21\u010f\1\u0115"+
    "\7\u010f\6\65\41\0\1\u0117\47\0\1\350\77\0\1\151"+
    "\17\0\1\65\2\0\1\65\1\0\11\65\3\u0118\3\65"+
    "\31\u0118\7\65\2\0\1\65\1\0\11\65\3\u0118\3\65"+
    "\23\u0118\1\u0119\5\u0118\7\65\2\0\1\65\1\0\11\65"+
    "\3\u0118\3\65\16\u0118\1\u011a\12\u0118\6\65\16\0\3\164"+
    "\3\0\16\164\1\u011b\12\164\6\0\1\65\2\0\1\65"+
    "\1\0\11\65\3\u0118\3\65\23\u0118\1\u011c\5\u0118\7\65"+
    "\2\0\1\65\1\0\11\65\3\u0118\3\65\4\u0118\1\u011d"+
    "\24\u0118\7\65\2\0\1\65\1\0\11\65\3\u0118\3\65"+
    "\23\u0118\1\u011d\5\u0118\6\65\47\0\1\u011e\13\0\1\65"+
    "\2\0\1\65\1\0\11\65\3\u011f\3\65\31\u011f\7\65"+
    "\2\0\1\65\1\0\11\65\3\u011f\3\65\16\u011f\1\u0120"+
    "\12\u011f\7\65\2\0\1\65\1\0\11\65\3\u011f\3\65"+
    "\21\u011f\1\u0121\7\u011f\6\65\16\0\3\164\3\0\21\164"+
    "\1\173\7\164\6\0\1\65\2\0\1\65\1\0\11\65"+
    "\3\u011f\3\65\1\u0122\30\u011f\6\65\24\0\1\u0123\36\0"+
    "\1\65\2\0\1\65\1\0\11\65\3\u0124\3\65\31\u0124"+
    "\7\65\2\0\1\65\1\0\11\65\3\u0124\3\65\21\u0124"+
    "\1\u0125\7\u0124\7\65\2\0\1\65\1\0\11\65\3\u0124"+
    "\3\65\23\u0124\1\u0126\5\u0124\6\65\47\0\1\u0127\13\0"+
    "\1\65\2\0\1\65\1\0\11\65\3\u0128\3\65\31\u0128"+
    "\7\65\2\0\1\65\1\0\11\65\3\u0128\3\65\10\u0128"+
    "\1\u0129\20\u0128\3\65\1\364\2\65\34\0\1\u012a\23\0"+
    "\1\u012a\2\0\1\65\2\0\1\65\1\0\11\65\3\u012b"+
    "\3\65\31\u012b\7\65\2\0\1\65\1\0\11\65\3\u012b"+
    "\3\65\16\u012b\1\u012c\12\u012b\6\65\42\0\1\u012d\20\0"+
    "\1\65\2\0\1\65\1\0\11\65\3\u012e\3\65\31\u012e"+
    "\7\65\2\0\1\65\1\0\11\65\3\u012e\3\65\15\u012e"+
    "\1\u012f\13\u012e\6\65\41\0\1\146\21\0\1\65\2\0"+
    "\1\65\1\0\11\65\3\u0130\3\65\31\u0130\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0131\3\65\31\u0131\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0132\3\65\31\u0132\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0133\3\65\31\u0133\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0134\3\65\31\u0134\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0135\3\65\31\u0135\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0136\3\65\31\u0136\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0137\3\65\31\u0137\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0138\3\65\31\u0138\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0139\3\65\31\u0139\7\65\2\0"+
    "\1\65\1\0\11\65\3\u013a\3\65\31\u013a\7\65\2\0"+
    "\1\65\1\0\11\65\3\u013b\3\65\31\u013b\7\65\2\0"+
    "\1\65\1\0\11\65\3\u013c\3\65\31\u013c\7\65\2\0"+
    "\1\65\1\0\11\65\3\u013d\3\65\31\u013d\7\65\2\0"+
    "\1\65\1\0\11\65\3\u013e\3\65\31\u013e\7\65\2\0"+
    "\1\65\1\0\11\65\3\u013f\3\65\31\u013f\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0140\3\65\31\u0140\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0141\3\65\31\u0141\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0142\3\65\31\u0142\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0143\3\65\31\u0143\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0144\3\65\31\u0144\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0145\3\65\31\u0145\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0146\3\65\31\u0146\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0147\3\65\31\u0147\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0148\3\65\31\u0148\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0149\3\65\31\u0149\7\65\2\0"+
    "\1\65\1\0\11\65\3\u014a\3\65\31\u014a\7\65\2\0"+
    "\1\65\1\0\11\65\3\u014b\3\65\31\u014b\7\65\2\0"+
    "\1\65\1\0\11\65\3\u014c\3\65\31\u014c\7\65\2\0"+
    "\1\65\1\0\11\65\3\u014d\3\65\31\u014d\7\65\2\0"+
    "\1\65\1\0\11\65\3\u014e\3\65\31\u014e\7\65\2\0"+
    "\1\65\1\0\11\65\3\u014f\3\65\31\u014f\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0150\3\65\31\u0150\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0151\3\65\31\u0151\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0152\3\65\31\u0152\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0153\3\65\31\u0153\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0154\3\65\31\u0154\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0155\3\65\31\u0155\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0156\3\65\31\u0156\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0157\3\65\31\u0157\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0158\3\65\31\u0158\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0159\3\65\31\u0159\7\65\2\0"+
    "\1\65\1\0\11\65\3\u015a\3\65\31\u015a\7\65\2\0"+
    "\1\65\1\0\11\65\3\u015b\3\65\31\u015b\7\65\2\0"+
    "\1\65\1\0\11\65\3\u015c\3\65\31\u015c\7\65\2\0"+
    "\1\65\1\0\11\65\3\u015d\3\65\31\u015d\7\65\2\0"+
    "\1\65\1\0\11\65\3\u015e\3\65\31\u015e\7\65\2\0"+
    "\1\65\1\0\11\65\3\u015f\3\65\31\u015f\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0160\3\65\31\u0160\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0161\3\65\31\u0161\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0162\3\65\31\u0162\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0163\3\65\31\u0163\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0164\3\65\31\u0164\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0165\3\65\31\u0165\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0166\3\65\31\u0166\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0167\3\65\31\u0167\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0168\3\65\31\u0168\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0169\3\65\31\u0169\7\65\2\0"+
    "\1\65\1\0\11\65\3\u016a\3\65\31\u016a\7\65\2\0"+
    "\1\65\1\0\11\65\3\u016b\3\65\31\u016b\7\65\2\0"+
    "\1\65\1\0\11\65\3\u016c\3\65\31\u016c\7\65\2\0"+
    "\1\65\1\0\11\65\3\u016d\3\65\31\u016d\7\65\2\0"+
    "\1\65\1\0\11\65\3\u016e\3\65\31\u016e\7\65\2\0"+
    "\1\65\1\0\11\65\3\u016f\3\65\31\u016f\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0170\3\65\31\u0170\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0171\3\65\31\u0171\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0172\3\65\31\u0172\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0173\3\65\31\u0173\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0174\3\65\31\u0174\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0175\3\65\31\u0175\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0176\3\65\31\u0176\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0177\3\65\31\u0177\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0178\3\65\31\u0178\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0179\3\65\31\u0179\7\65\2\0"+
    "\1\65\1\0\11\65\3\u017a\3\65\31\u017a\7\65\2\0"+
    "\1\65\1\0\11\65\3\u017b\3\65\31\u017b\7\65\2\0"+
    "\1\65\1\0\11\65\3\u017c\3\65\31\u017c\7\65\2\0"+
    "\1\65\1\0\11\65\3\u017d\3\65\31\u017d\7\65\2\0"+
    "\1\65\1\0\11\65\3\u017e\3\65\31\u017e\7\65\2\0"+
    "\1\65\1\0\11\65\3\u017f\3\65\31\u017f\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0180\3\65\31\u0180\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0181\3\65\31\u0181\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0182\3\65\31\u0182\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0183\3\65\31\u0183\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0184\3\65\31\u0184\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0185\3\65\31\u0185\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0186\3\65\31\u0186\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0187\3\65\31\u0187\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0188\3\65\31\u0188\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0189\3\65\31\u0189\7\65\2\0"+
    "\1\65\1\0\11\65\3\u018a\3\65\31\u018a\7\65\2\0"+
    "\1\65\1\0\11\65\3\u018b\3\65\31\u018b\7\65\2\0"+
    "\1\65\1\0\11\65\3\u018c\3\65\31\u018c\7\65\2\0"+
    "\1\65\1\0\11\65\3\u018d\3\65\31\u018d\7\65\2\0"+
    "\1\65\1\0\11\65\3\u018e\3\65\31\u018e\7\65\2\0"+
    "\1\65\1\0\11\65\3\u018f\3\65\31\u018f\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0190\3\65\31\u0190\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0191\3\65\31\u0191\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0192\3\65\31\u0192\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0193\3\65\31\u0193\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0194\3\65\31\u0194\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0195\3\65\31\u0195\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0196\3\65\31\u0196\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0197\3\65\31\u0197\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0198\3\65\31\u0198\7\65\2\0"+
    "\1\65\1\0\11\65\3\u0199\3\65\31\u0199\7\65\2\0"+
    "\1\65\1\0\11\65\3\u019a\3\65\31\u019a\7\65\2\0"+
    "\1\65\1\0\11\65\3\u019b\3\65\31\u019b\7\65\2\0"+
    "\1\65\1\0\11\65\3\u019c\3\65\31\u019c\7\65\2\0"+
    "\1\65\1\0\11\65\3\u019d\3\65\31\u019d\7\65\2\0"+
    "\1\65\1\0\11\65\3\u019e\3\65\31\u019e\7\65\2\0"+
    "\1\65\1\0\11\65\3\u019f\3\65\31\u019f\7\65\2\0"+
    "\1\65\1\0\11\65\3\u01a0\3\65\31\u01a0\7\65\2\0"+
    "\1\65\1\0\11\65\3\u01a1\3\65\31\u01a1\6\65";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19737];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\40\1\1\0\1\11\1\1"+
    "\1\0\1\11\1\1\1\0\6\1\1\0\5\1\1\0"+
    "\6\1\1\0\5\1\1\0\7\1\1\0\14\1\1\0"+
    "\2\1\1\0\2\1\2\0\2\11\1\0\1\1\3\0"+
    "\1\11\1\1\1\0\1\11\1\1\1\0\5\1\1\0"+
    "\6\1\1\0\2\1\1\0\17\1\1\0\6\1\1\0"+
    "\7\1\4\0\1\11\1\0\5\1\1\0\2\1\1\0"+
    "\10\1\1\0\4\1\1\0\6\1\1\0\4\1\5\0"+
    "\32\1\4\0\11\1\1\0\7\1\3\0\15\1\3\0"+
    "\10\1\1\0\6\1\1\0\4\1\1\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\163\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
// Lista para guardar errores lÃ©xicos
private ArrayList<String> errores = new ArrayList<>();

public ArrayList<String> getErrores() {
    return errores;
}

// Mapa para tokens aceptados
private HashMap<String, TokenInfo> tokensAceptados = new HashMap<>();

// Clase auxiliar para almacenar info de token
private static class TokenInfo {
    String tipo;
    HashMap<Integer, Integer> lineas = new HashMap<>();

    TokenInfo(String tipo) {
        this.tipo = tipo;
    }

    void agregarLinea(int linea) {
        lineas.put(linea, lineas.getOrDefault(linea, 0) + 1);
    }
}

// MÃ©todo para registrar tokens vÃ¡lidos
private void registrarToken(String token, String tipo) {
    token = token.toUpperCase(); // opcional: para normalizar mayÃºsculas
    TokenInfo info = tokensAceptados.get(token);
    if(info == null) {
        info = new TokenInfo(tipo);
        tokensAceptados.put(token, info);
    }
    info.agregarLinea(yyline + 1); // yyline empieza en 0
}

// MÃ©todo para mostrar tabla al final
public void imprimirTokens() {
    System.out.printf("%-20s %-25s %s\n", "Token", "Tipo de Token", "LÃ­neas");
    System.out.println("----------------------------------------------------------");
    List<String> claves = new ArrayList<>(tokensAceptados.keySet());
    Collections.sort(claves); // orden alfabÃ©tico
    for(String token : claves) {
        TokenInfo info = tokensAceptados.get(token);
        StringBuilder sb = new StringBuilder();
        for(Map.Entry<Integer, Integer> e : info.lineas.entrySet()) {
            sb.append(e.getKey());
            if(e.getValue() > 1) sb.append("(").append(e.getValue()).append(")");
            sb.append(", ");
        }
        if(sb.length() >= 2) sb.setLength(sb.length() - 2); // quitar Ãºltima coma
        System.out.printf("%-20s %-25s %s\n", token, info.tipo, sb.toString());
    }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public String yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
               ", columna " + (yycolumn+1) +
               ": " + yytext());
   return "ERROR: " + yytext();
            }
          // fall through
          case 21: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 22: break;
          case 3:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": string sin cerrar. Texto: " + yytext());
    return "ERROR STRING: " + yytext();
            }
          // fall through
          case 23: break;
          case 4:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": carÃ¡cter sin cerrar. Texto: " + yytext());
    return "ERROR CARACTER: " + yytext();
            }
          // fall through
          case 24: break;
          case 5:
            { registrarToken(yytext(), "OPERADOR");
    return "OPERADOR: " + yytext();
            }
          // fall through
          case 25: break;
          case 6:
            { registrarToken(yytext(), "LITERAL ENTERO");
    return "LITERAL ENTERO: " + yytext();
            }
          // fall through
          case 26: break;
          case 7:
            { registrarToken(yytext(), "IDENTIFICADOR");
    return "IDENTIFICADOR: " + yytext();
            }
          // fall through
          case 27: break;
          case 8:
            { registrarToken(yytext(), "LITERAL STRING");
    return "LITERAL STRING: " + yytext();
            }
          // fall through
          case 28: break;
          case 9:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": carÃ¡cter invÃ¡lido. Texto: " + yytext());
    return "ERROR CARACTER: " + yytext();
            }
          // fall through
          case 29: break;
          case 10:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": nÃºmero real incorrecto. Texto: " + yytext());
    return "ERROR REAL: " + yytext();
            }
          // fall through
          case 30: break;
          case 11:
            { registrarToken(yytext(), "LITERAL OCTAL");
    return "LITERAL OCTAL: " + yytext();
            }
          // fall through
          case 31: break;
          case 12:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": identificador invÃ¡lido, no puede iniciar con un nÃºmero. Texto: " + yytext());
    return "ERROR IDENTIFICADOR: " + yytext();
            }
          // fall through
          case 32: break;
          case 13:
            { registrarToken(yytext(), "PALABRA RESERVADA");
    return "PALABRA RESERVADA: " + yytext();
            }
          // fall through
          case 33: break;
          case 14:
            { /* Ignorar comentario tipo { } */
            }
          // fall through
          case 34: break;
          case 15:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": string incorrecto. Texto: " + yytext());
    return "ERROR STRING: " + yytext();
            }
          // fall through
          case 35: break;
          case 16:
            { registrarToken(yytext(), "LITERAL CARACTER");
    return "LITERAL CARACTER: " + yytext();
            }
          // fall through
          case 36: break;
          case 17:
            { registrarToken(yytext(), "LITERAL REAL");
    return "LITERAL REAL: " + yytext();
            }
          // fall through
          case 37: break;
          case 18:
            { registrarToken(yytext(), "LITERAL HEXADECIMAL");
    return "LITERAL HEXADECIMAL: " + yytext();
            }
          // fall through
          case 38: break;
          case 19:
            { errores.add("Error en lÃ­nea " + (yyline+1) +
                ", columna " + (yycolumn+1) +
                ": identificador invÃ¡lido, solo se permiten letras y dÃ­gitos. Texto: " + yytext());
    return "ERROR IDENTIFICADOR: " + yytext();
            }
          // fall through
          case 39: break;
          case 20:
            { /* Ignorar comentario tipo (* *) */
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
